// com.app.view.View// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;	import com.adobe.utils.AGALMiniAssembler;		import flash.display.Sprite;	import flash.display3D.Context3D;	import flash.display3D.Context3DProgramType;	import flash.display3D.Context3DRenderMode;	import flash.display3D.Context3DVertexBufferFormat;	import flash.display3D.IndexBuffer3D;	import flash.display3D.Program3D;	import flash.display3D.VertexBuffer3D;	import flash.events.*;	import flash.geom.Matrix3D;	import flash.geom.Rectangle;	import flash.geom.Vector3D;	import flash.utils.getTimer;
		public class View extends Sprite{				//vars				//objects		private var appData:AppData=AppData.instance;		private var _context3D:Context3D;		private var _program:Program3D;		private var _vertices:Vector.<Number>;		private var _indices:Vector.<uint>;		private var _vertexBuffer:VertexBuffer3D;		private var _indexBuffer:IndexBuffer3D;		private var _vertexShader:AGALMiniAssembler;		private var _fragmentShader:AGALMiniAssembler;				//const		public const NAME:String="view";		public const RETURNTYPE:String=NAME;				/** Storage for the singleton instance. */		private static const _instance:View = new View(ViewLock);				public function View(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != ViewLock)			{				throw new Error("Invalid View access.  Use View.instance instead.");			} else {				//init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						if(stage){onAddedToStage();} else {addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);}		}				private function initVars():void{					}				private function initEvents():void{			appData.eventManager.listen(NAME, onView);			stage.stage3Ds[0].addEventListener(Event.CONTEXT3D_CREATE, onContext3DCreated);			stage.stage3Ds[0].addEventListener(ErrorEvent.ERROR, onStageError);			addEventListener(Event.ENTER_FRAME, onEnterFrame);		}				private function initObjs():void{			stage.stage3Ds[0].requestContext3D(Context3DRenderMode.AUTO);		}				private function init3D():void{			//get context			_context3D = stage.stage3Ds[0].context3D;						//back buffer			_context3D.configureBackBuffer(800, 600, 0, false);						//vertex buffer			_vertices=Vector.<Number>([				-0.3,-0.3, 0, 1, 0, 0, // x, y, z, r, g, b				-0.3, 0.3, 0, 0, 1, 0,				 0.3, 0.3, 0, 0, 0, 1			]);			_vertexBuffer=_context3D.createVertexBuffer(3,6);			_vertexBuffer.uploadFromVector(_vertices,0,3);						//index buffer			_indices=Vector.<uint>([0,1,2]);			_indexBuffer=_context3D.createIndexBuffer(3);			_indexBuffer.uploadFromVector(_indices,0,3);						//vertex shader			_vertexShader=new AGALMiniAssembler();			_vertexShader.assemble(Context3DProgramType.VERTEX,				"m44 op, va0, vc0\n" + // pos to clipspace				"mov v0, va1" // copy color			);							//fragment shader			_fragmentShader=new AGALMiniAssembler();			_fragmentShader.assemble(Context3DProgramType.FRAGMENT,				"mov oc, v0"			);						//program			_program=_context3D.createProgram();			_program.upload(_vertexShader.agalcode, _fragmentShader.agalcode);					}		//*****Core Functionality						//*****Event Handlers				private function onEnterFrame(e:Event):void{			if ( !_context3D ) 				return;						//clear the color buffer and set the background color			_context3D.clear(0,0,0,1);						//set vertex position to register 0			_context3D.setVertexBufferAt(0,_vertexBuffer,0,Context3DVertexBufferFormat.FLOAT_3);						//set color to register 1			_context3D.setVertexBufferAt(1,_vertexBuffer,3,Context3DVertexBufferFormat.FLOAT_3);						//set the shader program			_context3D.setProgram(_program);						//set constant matrix			var m:Matrix3D = new Matrix3D();			m.appendRotation(getTimer()/40, Vector3D.Z_AXIS);			_context3D.setProgramConstantsFromMatrix(Context3DProgramType.VERTEX, 0, m, true);						//draw the triangles			_context3D.drawTriangles(_indexBuffer);						//display			_context3D.present();		}				private function onAddedToStage(e:Event=null):void{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			initVars();			initEvents();			initObjs();		}				private function onContext3DCreated(e:Event):void{			removeEventListener(Event.CONTEXT3D_CREATE, onContext3DCreated);			debug("stage.stage3Ds[0].context3D.driverInfo=="+stage.stage3Ds[0].context3D.driverInfo);			init3D();		}				private function onStageError(e:ErrorEvent):void{			debug("e.errorID=="+e.errorID);			debug("e.type=="+e.type);		}				private function onSQL(e:MuleEvent):void{			/*debug("onSQL()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case RETURNTYPE:									break;							}		}				private function onView(e:MuleEvent):void{			/*debug("onView()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								default:					debug("onView()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);					break;							}		}				//*****Gets and Sets				public static function get instance():View{return _instance;}		//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass ViewLock{}